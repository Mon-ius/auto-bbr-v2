name: Build GOOGLE-BBR V2
on:
  push:
    branches: 
      - main
      - v2alpha
  pull_request:
    branches: 
      - main
      - v2alpha
  schedule:
    # * is a special character in YAML so you have to quote this string
    - cron: '30 6 * * 1'
    
  repository_dispatch:
  workflow_dispatch:
    inputs:
      ssh:
        description: 'SSH connection to Actions'
        required: true
        default: 'true'

env:
  REPO_URL: https://github.com/google/bbr
  REPO_BRANCH: v2alpha
  REPO_NAME: google-bbr
  ORIGIN_NAME: google-bbr
  FEEDS_CONF: feeds.conf.default
  CONFIG_FILE: .config
  UPLOAD_PKG_DIR: true
  UPLOAD_FIRMWARE: true
  UPLOAD_WETRANSFER: true
  UPLOAD_RELEASE: true
  PGP : true
  ARC: ''
  VER: ''
  LOCALVERSION: ''
  PKG_DIR: ''
  INSTALL_DIR: ''
  BUILD_DIR: ''
  TEST_PKG: ''
  MAKE_OPTS: ''
  KERNEL_PKG: ''
  RELEASE_TAG: ''
  KERNEL_HEADER: 'linux-headers'
  KERNEL_IMAGE: 'linux-image'
  KERNEL_LIBC: 'linux-libc-dev'

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v2
        with:
          repository: ${{ github.repository }}
          ref: 'main'

      - name: init
        run: |
          sudo sed -Ei 's/^# deb-src /deb-src /' /etc/apt/sources.list
          sudo -E apt-get -qq update
          sudo -E apt-get -qq install $(curl -fsSL git.io/bbrv2-ubuntu-2004)
          sudo -E apt-get -qq build-dep linux
          sudo -E apt-get -qq autoremove --purge
          sudo -E apt-get -qq clean
          sudo mkdir -p /bbr /release/upload
          sudo chown $USER:$GROUPS /bbr
          sudo chown -R $USER:$GROUPS /release

      - name: Clone source code
        working-directory: /bbr
        run: |
          df -hT $PWD
          git clone -o $ORIGIN_NAME -b $REPO_BRANCH $REPO_URL $REPO_NAME
          ln -sf /bbr/$REPO_NAME $GITHUB_WORKSPACE/$REPO_NAME

      - name: set env and config
        working-directory: /bbr/${{ env.REPO_NAME }}
        run: |
          ARC=$(dpkg --print-architecture)
          VER=$(grep '^VERSION=*\|^PATCHLEVEL=*' Makefile | sed 's/.*=\(.*\)/\1/' | sed -e 's/ //g' | sed ':a;N;$!ba;s/\n/./g')
          BRANCH=`git rev-parse --abbrev-ref HEAD | sed s/-/+/g`
          SHA1=`git rev-parse --short HEAD`
          LOCALVERSION=-custom-${BRANCH}-${SHA1}
          PKG_DIR=/release/${LOCALVERSION}/pkg
          INSTALL_DIR=/release/${LOCALVERSION}/install
          BUILD_DIR=/release/${LOCALVERSION}/build
          TEST_PKG=kernel-test-${BRANCH}-${SHA1}.tar.gz2
          KERNEL_PKG=kernel${LOCALVERSION}.tar.gz2
          RELEASE_TAG=Ubuntu-2004-bbr2${LOCALVERSION}.tar.gz2
          MAKE_OPTS="-j`nproc` \
                    LOCALVERSION=${LOCALVERSION} \
                    EXTRAVERSION='' \
                    INSTALL_PATH=${INSTALL_DIR}/boot \
                    INSTALL_MOD_PATH=${INSTALL_DIR}"

          echo "VER=$VER" >> $GITHUB_ENV
          echo "ARC=$ARC" >> $GITHUB_ENV
          echo "BRANCH=$BRANCH" >> $GITHUB_ENV
          echo "SHA1=$SHA1" >> $GITHUB_ENV
          echo "LOCALVERSION=$LOCALVERSION" >> $GITHUB_ENV
          echo "PKG_DIR=$PKG_DIR" >> $GITHUB_ENV
          echo "INSTALL_DIR=$INSTALL_DIR" >> $GITHUB_ENV
          echo "BUILD_DIR=$BUILD_DIR" >> $GITHUB_ENV
          echo "TEST_PKG=$TEST_PKG" >> $GITHUB_ENV
          echo "RELEASE_TAG=$RELEASE_TAG" >> $GITHUB_ENV
          echo "KERNEL_PKG=$KERNEL_PKG" >> $GITHUB_ENV
          echo "MAKE_OPTS=$MAKE_OPTS" >> $GITHUB_ENV


      - name: Disable MODULE_SIG and DEBUG_INFO
        working-directory: /bbr/${{ env.REPO_NAME }}
        run: |
          echo "copying config.gce to .config ..."
          cp config.gce .config
          echo "cleaning..."          
          mkdir -p ${BUILD_DIR}
          mkdir -p ${INSTALL_DIR}/boot
          mkdir -p ${PKG_DIR}
          ./scripts/config --disable MODULE_SIG && ./scripts/config --disable DEBUG_INFO

      - name: SSH connection to Actions
        uses: P3TERX/ssh2actions@v1.0.0
        if: (github.event.inputs.ssh == 'true' && github.event.inputs.ssh  != 'false') || contains(github.event.action, 'ssh')
        env:
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}

      - name: Build kernel-package 
        id: package
        working-directory: /bbr/${{ env.REPO_NAME }}
        run: |
          set +e
          echo $(pwd)
          echo "running make olddefconfig ..."
          tree -L 1
          make olddefconfig                 > /tmp/make.olddefconfig
          make ${MAKE_OPTS} prepare         > /tmp/make.prepare
          echo "making..."
          make ${MAKE_OPTS}                 > /tmp/make.default
          echo "making modules ..."
          make ${MAKE_OPTS} modules         > /tmp/make.modules
          echo "making install ..."
          make ${MAKE_OPTS} install         > /tmp/make.install
          echo "making modules_install ..."
          make ${MAKE_OPTS} modules_install > /tmp/make.modules_install
          set -e
          echo "making tarball ..."
          (cd ${INSTALL_DIR}; tar -cvzf ${PKG_DIR}/${KERNEL_PKG}  boot/* lib/modules/* --owner=0 --group=0  > /tmp/make.tarball)
          echo "::set-output name=status::success"
          

      - name: Build dpkg
        id: dpkg
        working-directory: /bbr/${{ env.REPO_NAME }}
        run: |
          ls -al .*
          rm -rf .git .idea .pybuild
          cat .config
          if  $PGP ; then
            ssh-keygen -b 2048 -t rsa -f ~/.ssh/id_ecdsa -q -N ''
          else
            sed -ri '/CONFIG_SYSTEM_TRUSTED_KEYS/s/=.+/=''/g' .config
          fi
          make -j`nproc` deb-pkg LOCALVERSION=$LOCALVERSION
          echo "::set-output name=status::success"
          cd /bbr && mv *.deb /release/upload


      - name: Packages test scripts
        id: test
        working-directory: /bbr/${{ env.REPO_NAME }}/gtests/net/tcp/bbr/
        run: 
          tar -cvzf ${PKG_DIR}/${TEST_PKG} nsperf/* --owner=0 --group=0  > /tmp/test.tarball

      - name: List and package all
        working-directory: /release/upload
        run: |
          mv $(ls ${KERNEL_HEADER}*) ${KERNEL_HEADER}-${VER}${LOCALVERSION}-${ARC}.deb
          mv $(ls ${KERNEL_IMAGE}*) ${KERNEL_IMAGE}-${VER}${LOCALVERSION}-${ARC}.deb
          mv $(ls ${KERNEL_LIBC}*) ${KERNEL_LIBC}-${VER}${LOCALVERSION}-${ARC}.deb
          cp $PKG_DIR/$KERNEL_PKG /release/upload
          cp $PKG_DIR/$TEST_PKG /release/upload
          tar -cvzf /release/${RELEASE_TAG}  /release/upload/* --owner=0 --group=0  > /tmp/WeTransfer.tarball
          tree /bbr -L 2
          tree /release -L 2

      - name: Check space usage
        working-directory: /release/upload
        if: (!cancelled())
        run: |
          df -hT
          echo ${KERNEL_HEADER}
          echo ${KERNEL_IMAGE}

      - name: Upload to WeTransfer
        working-directory: /release
        id: wetransfer
        if: steps.dpkg.outputs.status == 'success' && env.UPLOAD_WETRANSFER == 'true' && !cancelled()
        run: |
          curl -fsSL git.io/file-transfer | sh
          ./transfer wet -s -p 16 --no-progress ${RELEASE_TAG} 2>&1 | tee wetransfer.log
          echo "::warning file=wetransfer.com::$(cat wetransfer.log | grep https)"
          echo "::set-output name=url::$(cat wetransfer.log | grep https | grep https | cut -f3 -d" ")"
          cat  wetransfer.log
          
      - name: Generate release 
        id: release
        if: steps.dpkg.outputs.status == 'success' && steps.package.outputs.status == 'success' && env.UPLOAD_RELEASE == 'true' && !cancelled()
        run: |
          echo "::set-output name=release_name::bbr_v2alpha_$(date +'%Y%m%d%H%M')"
          touch release.txt
          [ $UPLOAD_WETRANSFER = true ] && echo "ðŸ”— [WeTransfer](${{ steps.wetransfer.outputs.url }})" >> release.txt
          echo "::set-output name=status::success"

      - name: Upload packages
        uses: actions/upload-artifact@main
        if: steps.dpkg.outputs.status == 'success' && steps.package.outputs.status == 'success' && env.UPLOAD_PKG_DIR == 'true'
        with:
          name: bbr_v2alpha_$(date +'%Y%m%d%H%M')
          path: /release/upload

      - name: Upload release
        uses: softprops/action-gh-release@v1
        if: steps.release.outputs.status == 'success' && !cancelled()
        env:
          GITHUB_TOKEN: ${{ secrets.ACTIONS }}
        with:
          tag_name: ${{ steps.release.outputs.release_name }}
          body_path: release.txt
          files: /release/upload/*
          

      - name: Delete workflow runs
        uses: GitRML/delete-workflow-runs@main
        with:
          repository: ${{ github.repository }}
          retain_days: 1
          keep_minimum_runs: 3
        env:
          GITHUB_TOKEN: ${{ secrets.ACTIONS }}

      - name: Remove old Releases
        uses: dev-drprasad/delete-older-releases@v0.1.0
        if: env.UPLOAD_RELEASE == 'true' && !cancelled()
        with:
          keep_latest: 3
          delete_tags: true
        env:
          GITHUB_TOKEN: ${{ secrets.ACTIONS }}