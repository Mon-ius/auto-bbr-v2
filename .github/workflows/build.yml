name: Build GOOGLE-BBR V2
on:
  push:
    branches: 
      - main
      - v2alpha
  pull_request:
    branches: 
      - main
      - v2alpha
  schedule:
    # * is a special character in YAML so you have to quote this string
    - cron: '30 6 * * 1'
    
  repository_dispatch:
  workflow_dispatch:
    inputs:
      ssh:
        description: 'SSH connection to Actions'
        required: true
        default: 'true'

env:
  REPO_URL: https://github.com/google/bbr
  REPO_BRANCH: v2alpha
  REPO_NAME: google-bbr
  ORIGIN_NAME: google-bbr
  FEEDS_CONF: feeds.conf.default
  CONFIG_FILE: .config
  UPLOAD_BIN_DIR: false
  UPLOAD_FIRMWARE: true
  UPLOAD_WETRANSFER: false
  UPLOAD_RELEASE: false
  LOCALVERSION: ""
  PKG_DIR: ""
  INSTALL_DIR: ""
  BUILD_DIR: ""
  KERNEL_PKG: ""
  MAKE_OPTS: ""

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      # Runs a single command using the runners shell
      - name: init
        run: |
          sudo sed -Ei 's/^# deb-src /deb-src /' /etc/apt/sources.list
          sudo -E apt-get -qq update
          sudo -E apt-get -qq install $(curl -fsSL git.io/bbrv2-ubuntu-2004)
          sudo -E apt-get -qq build-dep linux
          sudo -E apt-get -qq autoremove --purge
          sudo -E apt-get -qq clean
          sudo mkdir -p /bbr /release
          sudo chown $USER:$GROUPS /bbr
          sudo chown $USER:$GROUPS /release

      - name: Clone source code
        working-directory: /bbr
        run: |
          df -hT $PWD
          git clone -o $ORIGIN_NAME -b $REPO_BRANCH $REPO_URL $REPO_NAME
          ln -sf /bbr/$REPO_NAME $GITHUB_WORKSPACE/$REPO_NAME

      - name: set env and config
        working-directory: /bbr/${{ env.REPO_NAME }}
        run: |
          BRANCH=`git rev-parse --abbrev-ref HEAD | sed s/-/+/g`
          SHA1=`git rev-parse --short HEAD`
          LOCALVERSION=-custom-${BRANCH}-${SHA1}
          PKG_DIR=/release/${LOCALVERSION}/pkg
          INSTALL_DIR=/release/${LOCALVERSION}/install
          BUILD_DIR=/release/${LOCALVERSION}/build
          KERNEL_PKG=kernel${LOCALVERSION}.tar.gz2
          MAKE_OPTS="-j`nproc` \
                    LOCALVERSION=${LOCALVERSION} \
                    EXTRAVERSION='' \
                    INSTALL_PATH=${INSTALL_DIR}/boot \
                    INSTALL_MOD_PATH=${INSTALL_DIR}"

          echo "BRANCH=$BRANCH" >> $GITHUB_ENV
          echo "SHA1=$SHA1" >> $GITHUB_ENV
          echo "LOCALVERSION=$LOCALVERSION" >> $GITHUB_ENV
          echo "PKG_DIR=$PKG_DIR" >> $GITHUB_ENV
          echo "INSTALL_DIR=$INSTALL_DIR" >> $GITHUB_ENV
          echo "BUILD_DIR=$BUILD_DIR" >> $GITHUB_ENV
          echo "KERNEL_PKG=$KERNEL_PKG" >> $GITHUB_ENV
          echo "MAKE_OPTS=$MAKE_OPTS" >> $GITHUB_ENV


      - name: Disable MODULE_SIG and DEBUG_INFO
        working-directory: /bbr/${{ env.REPO_NAME }}
        run: |
          echo "copying config.gce to .config ..."
          cp config.gce .config

          echo "cleaning..."          
          mkdir -p ${BUILD_DIR}
          mkdir -p ${INSTALL_DIR}/boot
          mkdir -p ${PKG_DIR}
          ./scripts/config --disable MODULE_SIG && ./scripts/config --disable DEBUG_INFO

      - name: Build kernel-package 
        working-directory: /bbr/${{ env.REPO_NAME }}
        run: |
          set +e
          echo $(pwd)
          echo "running make olddefconfig ..."
          make olddefconfig               > /tmp/make.olddefconfig
          make ${MAKE_OPTS} prepare         > /tmp/make.prepare
          echo "making..."
          make ${MAKE_OPTS}                 > /tmp/make.default
          echo "making modules ..."
          make ${MAKE_OPTS} modules         > /tmp/make.modules
          echo "making install ..."
          make ${MAKE_OPTS} install         > /tmp/make.install
          echo "making modules_install ..."
          make ${MAKE_OPTS} modules_install > /tmp/make.modules_install
          set -e
          echo "making tarball ..."
          (cd ${INSTALL_DIR}; tar -cvzf ${PKG_DIR}/${KERNEL_PKG}  boot/* lib/modules/* --owner=0 --group=0  > /tmp/make.tarball)
          echo "::set-output name=status::success"
          grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/' > DEVICE_NAME
          [ -s DEVICE_NAME ] && echo "DEVICE_NAME=_$(cat DEVICE_NAME)" >> $GITHUB_ENV
          echo "FILE_DATE=_$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV
          
          
      - name: List packages
        working-directory: /release
        run: |
          cp -r ${PKG_DIR}/${KERNEL_PKG} /release && ls -alh /bbr

      - name: Build dpkg
        working-directory: /bbr/${{ env.REPO_NAME }}
        run: |
          ls -al .*
          rm -rf .git .idea .pybuild
          ssh-keygen -b 2048 -t rsa -f ~/.ssh/id_ecdsa -q -N ""
          make -j`nproc` deb-pkg LOCALVERSION=-custom

      - name: extract packages
        working-directory: /bbr
        run: |
          ls -alh /bbr
          ls -alh /release

      - name: Check space usage
        if: (!cancelled())
        run: df -hT
        
          
