name: Build GOOGLE-BBR V2 on openwrt bcm2711
on:
  push:
    branches: 
      - main
      - v2alpha

  schedule:
    - cron: '30 6 * * 1'
      
  repository_dispatch:
  workflow_dispatch:
    inputs:
      ssh:
        description: 'SSH connection to Actions'
        required: true
        default: 'true'

env:
  CONFIG_FILE_SOURCE: https://downloads.openwrt.org/releases/21.02.0-rc2/targets/bcm27xx/bcm2711/config.buildinfo
  REPO_URL: https://github.com/openwrt/openwrt
  REPO_BRANCH: master
  REPO_NAME: openwrt
  WORK_DIR: /openwrt
  FEEDS_CONF: feeds.conf.default
  UPLOAD_PKG_DIR: true
  UPLOAD_FIRMWARE: true
  UPLOAD_WETRANSFER: true
  UPLOAD_RELEASE: true

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v2
        with:
          repository: ${{ github.repository }}
          ref: 'main'

      - name: init
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          docker rmi `docker images -q`
          sudo rm -rf /usr/share/dotnet /etc/mysql /etc/php /etc/apt/sources.list.d
          sudo -E apt-get -y purge azure-cli ghc* zulu* hhvm llvm* firefox google* dotnet* powershell openjdk* mysql* php* android*
          sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc
          sudo -E apt-get -qq update
          sudo -E apt-get -qq install $(curl -fsSL git.io/bbrv2-ubuntu-2004)
          sudo -E apt-get -qq autoremove --purge
          sudo -E apt-get -qq clean
          sudo mkdir -p /release/upload
          sudo chown -R $USER:$GROUPS /release
          df -h
          tree -L 3
          ls -al

      - name: Clone source code
        run: |
          git clone --depth 1 -b $REPO_BRANCH $REPO_URL $REPO_NAME
          sudo ln -sf $(pwd)/$REPO_NAME $WORK_DIR

      - name: Load feeds && configuration
        working-directory: ${{ env.WORK_DIR }}
        run: |
          curl -L $CONFIG_FILE_SOURCE -o .config
          ./scripts/feeds update -a && ./scripts/feeds install -a

      - name: Download package
        working-directory: ${{ env.WORK_DIR }}
        id: package
        run: |
          make defconfig
          make download -j8
          find dl -size -1024c -exec rm -f {} \;

      - name: Compile the firmware
        working-directory: ${{ env.WORK_DIR }}
        id: compile
        run: |
          echo -e "$(nproc) thread compile"
          make -j8 V=s
          echo "::set-output name=status::success"

      - name: Show config
        working-directory: ${{ env.WORK_DIR }}
        id: list
        run: |
          cat .config
      - name: List the firmware
        working-directory: ${{ env.WORK_DIR }}
        id: list
        run: |
          cd bin
          tree -L 3
          


